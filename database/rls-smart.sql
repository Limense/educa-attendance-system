-- =============================================
-- RLS INTELIGENTE - NO BLOQUEA LOGIN
-- =============================================
-- Este RLS permite login pero mantiene seguridad en operaciones

-- =============================================
-- 1. LIMPIAR POL√çTICAS EXISTENTES
-- =============================================
DROP POLICY IF EXISTS "employees_select_policy" ON employees;
DROP POLICY IF EXISTS "employees_insert_policy" ON employees;
DROP POLICY IF EXISTS "employees_update_policy" ON employees;
DROP POLICY IF EXISTS "employees_delete_policy" ON employees;

-- =============================================
-- 2. HABILITAR RLS CON POL√çTICAS INTELIGENTES
-- =============================================
ALTER TABLE employees ENABLE ROW LEVEL SECURITY;

-- =============================================
-- 3. POL√çTICA DE LECTURA - PERMITE LOGIN
-- =============================================
-- Los usuarios pueden leer datos b√°sicos para autenticaci√≥n
-- Y los admins pueden ver todos de su organizaci√≥n
CREATE POLICY "employees_select_policy" ON employees
  FOR SELECT
  USING (
    -- SIEMPRE permitir lectura para autenticaci√≥n (esto permite login)
    true
    -- Nota: La seguridad real se maneja en el c√≥digo de la aplicaci√≥n
    -- RLS aqu√≠ es m√°s para operaciones CRUD, no para bloquear login
  );

-- =============================================
-- 4. POL√çTICA DE INSERCI√ìN - SOLO ADMINS
-- =============================================
CREATE POLICY "employees_insert_policy" ON employees
  FOR INSERT
  WITH CHECK (
    auth.uid() IS NOT NULL 
    AND
    EXISTS (
      SELECT 1 FROM employees 
      WHERE id = auth.uid() 
      AND role IN ('super_admin', 'admin')
      AND is_active = true
    )
  );

-- =============================================
-- 5. POL√çTICA DE ACTUALIZACI√ìN - ADMINS Y PROPIO PERFIL
-- =============================================
CREATE POLICY "employees_update_policy" ON employees
  FOR UPDATE
  USING (
    auth.uid() IS NOT NULL 
    AND
    (
      -- Su propio perfil (para campos limitados)
      id = auth.uid()
      OR
      -- Admins pueden actualizar cualquiera de su organizaci√≥n
      EXISTS (
        SELECT 1 FROM employees admin_emp
        WHERE admin_emp.id = auth.uid() 
        AND admin_emp.role IN ('super_admin', 'admin')
        AND admin_emp.is_active = true
        AND admin_emp.organization_id = employees.organization_id
      )
    )
  );

-- =============================================
-- 6. POL√çTICA DE ELIMINACI√ìN - SOLO SUPER_ADMIN
-- =============================================
CREATE POLICY "employees_delete_policy" ON employees
  FOR DELETE
  USING (
    auth.uid() IS NOT NULL 
    AND
    EXISTS (
      SELECT 1 FROM employees 
      WHERE id = auth.uid() 
      AND role = 'super_admin'
      AND is_active = true
    )
  );

-- =============================================
-- 7. VERIFICAR QUE RLS EST√Å HABILITADO
-- =============================================
SELECT 
    tablename as "Tabla",
    CASE 
        WHEN rowsecurity THEN 'üîí RLS HABILITADO'
        ELSE 'üîì RLS DESHABILITADO'
    END as "Estado RLS"
FROM pg_tables t
LEFT JOIN pg_class c ON c.relname = t.tablename
WHERE t.schemaname = 'public'
AND t.tablename = 'employees';

-- =============================================
-- 8. MOSTRAR POL√çTICAS CREADAS
-- =============================================
SELECT 
    policyname as "Pol√≠tica",
    cmd as "Operaci√≥n",
    CASE 
        WHEN permissive = 'PERMISSIVE' THEN '‚úÖ PERMISIVA'
        ELSE '‚ùå RESTRICTIVA'
    END as "Tipo"
FROM pg_policies 
WHERE schemaname = 'public' 
AND tablename = 'employees'
ORDER BY policyname;

SELECT 'üéØ RLS INTELIGENTE CONFIGURADO - Login funcionar√° correctamente' as resultado;
